// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  CLIENT
}

enum OrderStatus {
  PENDING
  PAID
  FAILED
}

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  password  String
  name      String?
  phone     String?
  role      UserRole  @default(CLIENT)
  orders    Order[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Perfume {
  id          String       @id @default(uuid())
  name        String
  description String?
  price       Float
  imageUrl    String?
  stock       Int          @default(0)
  category    Category?    @relation(fields: [categoryId], references: [id])
  categoryId  String?
  orderItems  OrderItem[]
  reviews     Review[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Category {
  id        String    @id @default(uuid())
  name      String    @unique
  perfumes  Perfume[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Order {
  id              String           @id @default(uuid())
  user            User             @relation(fields: [userId], references: [id])
  userId          String
  items           OrderItem[]
  status          OrderStatus      @default(PENDING)
  total           Float
  shippingAddress ShippingAddress?
  payment         Payment?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model OrderItem {
  id        String   @id @default(uuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  perfume   Perfume  @relation(fields: [perfumeId], references: [id])
  perfumeId String
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ShippingAddress {
  id        String   @id @default(uuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String   @unique
  street    String
  city      String
  state     String
  zipCode   String
  country   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id            String   @id @default(uuid())
  order         Order    @relation(fields: [orderId], references: [id])
  orderId       String   @unique
  amount        Float
  currency      String   @default("USD")
  status        String   @default("pending")
  paymentMethod String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Review {
  id        String   @id @default(uuid())
  perfume   Perfume  @relation(fields: [perfumeId], references: [id])
  perfumeId String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}